// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Roster.App;

#nullable disable

namespace Roster.App.Migrations
{
    [DbContext(typeof(RosterDBContext))]
    [Migration("20250421071701_AddObjective")]
    partial class AddObjective
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("Roster.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetName")
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetNum")
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetType")
                        .HasColumnType("TEXT");

                    b.Property<string>("SuburbId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SuburbId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnitNum")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SuburbId1");

                    b.ToTable("Address", "TPT");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Roster.Models.Certificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Infinite")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Roster.Models.Objective", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<long>("CompleteBy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DateAdded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PriorityRating")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Objectives");
                });

            modelBuilder.Entity("Roster.Models.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Avatar")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DateOfBirth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HighlightColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.ToTable("Person");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Roster.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Distance")
                        .HasColumnType("REAL");

                    b.Property<string>("EndAddressId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShiftId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartAddressId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RouteId");

                    b.HasIndex("EndAddressId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("StartAddressId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Roster.Models.Shift", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CaseNoteCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("EndDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EndLocationId")
                        .HasColumnType("TEXT");

                    b.Property<long>("EndTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForegroundColor")
                        .HasColumnType("TEXT");

                    b.Property<short>("MaxTravelDistance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Reoccuring")
                        .HasColumnType("INTEGER");

                    b.Property<char>("ShiftType")
                        .HasColumnType("TEXT");

                    b.Property<long>("StartDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartLocationId")
                        .HasColumnType("TEXT");

                    b.Property<long>("StartTime")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TravelTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EndLocationId");

                    b.HasIndex("StartLocationId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Roster.Models.ShiftTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Day")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("WorkerId");

                    b.ToTable("ShiftTemplates");
                });

            modelBuilder.Entity("Roster.Models.Suburb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Suburbs");
                });

            modelBuilder.Entity("Roster.Models.Test", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("EndDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EndTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long>("StartDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StartTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Roster.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Roster.Models.WorkerCertificate", b =>
                {
                    b.Property<string>("WorkerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CertificateId")
                        .HasColumnType("TEXT");

                    b.Property<long>("DateObtained")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ExpiryDate")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkerId", "CertificateId");

                    b.HasIndex("CertificateId");

                    b.ToTable("WorkerCertificates");
                });

            modelBuilder.Entity("Roster.Models.ShiftAddress", b =>
                {
                    b.HasBaseType("Roster.Models.Address");

                    b.Property<string>("ShiftId")
                        .HasColumnType("TEXT");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftAddress", "TPT");
                });

            modelBuilder.Entity("Roster.Models.Client", b =>
                {
                    b.HasBaseType("Roster.Models.Person");

                    b.Property<string>("AddressId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenderPreference")
                        .HasColumnType("TEXT");

                    b.Property<string>("NDISNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryWorkerId")
                        .HasColumnType("TEXT");

                    b.Property<byte>("RiskCategory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecondaryWorkerId")
                        .HasColumnType("TEXT");

                    b.HasIndex("AddressId");

                    b.HasIndex("PrimaryWorkerId");

                    b.HasIndex("SecondaryWorkerId");

                    b.ToTable("Client", "TPT");
                });

            modelBuilder.Entity("Roster.Models.Worker", b =>
                {
                    b.HasBaseType("Roster.Models.Person");

                    b.Property<string>("AddressId")
                        .HasColumnType("TEXT");

                    b.HasIndex("AddressId");

                    b.ToTable("Worker", "TPT");
                });

            modelBuilder.Entity("Roster.Models.Address", b =>
                {
                    b.HasOne("Roster.Models.Suburb", "Suburb")
                        .WithMany()
                        .HasForeignKey("SuburbId1");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("Roster.Models.Objective", b =>
                {
                    b.HasOne("Roster.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Roster.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");

                    b.Navigation("Client");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Roster.Models.Route", b =>
                {
                    b.HasOne("Roster.Models.Address", "EndAddress")
                        .WithMany()
                        .HasForeignKey("EndAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roster.Models.Shift", null)
                        .WithMany("Routes")
                        .HasForeignKey("ShiftId");

                    b.HasOne("Roster.Models.Address", "StartAddress")
                        .WithMany()
                        .HasForeignKey("StartAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndAddress");

                    b.Navigation("StartAddress");
                });

            modelBuilder.Entity("Roster.Models.Shift", b =>
                {
                    b.HasOne("Roster.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Roster.Models.Address", "EndLocation")
                        .WithMany()
                        .HasForeignKey("EndLocationId");

                    b.HasOne("Roster.Models.Address", "StartLocation")
                        .WithMany()
                        .HasForeignKey("StartLocationId");

                    b.HasOne("Roster.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");

                    b.Navigation("Client");

                    b.Navigation("EndLocation");

                    b.Navigation("StartLocation");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Roster.Models.ShiftTemplate", b =>
                {
                    b.HasOne("Roster.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roster.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Roster.Models.WorkerCertificate", b =>
                {
                    b.HasOne("Roster.Models.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roster.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Roster.Models.ShiftAddress", b =>
                {
                    b.HasOne("Roster.Models.Address", null)
                        .WithOne()
                        .HasForeignKey("Roster.Models.ShiftAddress", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roster.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Roster.Models.Client", b =>
                {
                    b.HasOne("Roster.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Roster.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Roster.Models.Client", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roster.Models.Worker", "PrimaryWorker")
                        .WithMany()
                        .HasForeignKey("PrimaryWorkerId");

                    b.HasOne("Roster.Models.Worker", "SecondaryWorker")
                        .WithMany()
                        .HasForeignKey("SecondaryWorkerId");

                    b.Navigation("Address");

                    b.Navigation("PrimaryWorker");

                    b.Navigation("SecondaryWorker");
                });

            modelBuilder.Entity("Roster.Models.Worker", b =>
                {
                    b.HasOne("Roster.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Roster.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Roster.Models.Worker", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Roster.Models.Shift", b =>
                {
                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
